package bob.com.level;


import java.util.ArrayList;
import java.util.Random;

import sun.rmi.runtime.Log;
import bob.com.player.Player;
import bob.com.background.Background;
import bob.com.objects.Coin;
import bob.com.objects.Tile;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.utils.Array;

public class World {
	private int amount = 0;
	private Random random = new Random();
	private int randomnumber;
	private Background background;
	private Rectangle delRect;
	/** The blocks making up the world **/
	ArrayList<Tile> tiles = new ArrayList<Tile>();
	ArrayList<Coin> coins = new ArrayList<Coin>();
	public ArrayList<Coin> getCoins() {
		return coins;
	}
	public void setCoins(ArrayList<Coin> coins) {
		this.coins = coins;
	}
	public ArrayList<Tile> getTiles() {
		return tiles;
	}
	public void setTiles(ArrayList<Tile> tiles) {
		this.tiles = tiles;
	}
	public Background getBackground(){
		return background;
	}
	/** Our player controlled hero **/
	Player player;

	// Getters -----------
	public Player getPlayer() {
		return player;
	}
	// --------------------

	public World() {
		player = new Player(new Vector2(0, 2));
		this.delRect = new Rectangle(10,500,-200,0);
		this.background = new Background(new Vector2(-500,-100),new Vector2(-1000,-100),new Vector2(-1500,-100));
		generateLevel();
	}
	public void update(float delta)
	{
		this.delRect.x = this.player.getPosition().x-200;
		if(this.background.getPosition().x < this.player.getPosition().x){
			this.background.getPosition().x = this.player.getPosition().x + 500;
		}
		if(this.background.getPosition2().x  < this.player.getPosition().x){
			this.background.getPosition2().x = this.player.getPosition().x + 500;
		}
		if(this.background.getPosition3().x  < this.player.getPosition().x){
			this.background.getPosition3().x = this.player.getPosition().x + 500;
		}
		randomnumber = random.nextInt((3 - 0) + 1) + 0;
		
		if( player.getPosition().x > (amount-6)*32 ){
			generateRandom(randomnumber);
		}
		for(Tile t:tiles){
			if(t.get_box().overlaps(delRect)){
				tiles.remove(t);
				break;
			}
		}
		for(Coin c:coins){
			if(c.getBounds().overlaps(delRect)){
				coins.remove(c);
				break;
			}
		}
		for(Coin c:coins){
			c.Update(delta);
		}
		

	}
	private void generateRandom(int random){

		switch(random)
		{
		case 1:
			  AddBlock(amount*Tile.SIZE, 0*Tile.SIZE,random);
			  AddBlock(amount*Tile.SIZE, 0*Tile.SIZE,random); 	
			  AddBlock(amount*Tile.SIZE, 0*Tile.SIZE,random); 	
			  AddBlock(amount*Tile.SIZE, 0*Tile.SIZE,random); 	
			  AddBlock(amount*Tile.SIZE, 0*Tile.SIZE,random); 	
			  AddBlock(amount*Tile.SIZE, 1*Tile.SIZE,random); 	

			break;
		case 2:
			  AddBlock(amount*Tile.SIZE, 1*Tile.SIZE,random); 	
			  AddBlock(amount*Tile.SIZE, 0*Tile.SIZE,random); 	
			  AddBlock(amount*Tile.SIZE, 1*Tile.SIZE,random); 	
			  AddBlock(amount*Tile.SIZE, 0*Tile.SIZE,random); 	
			  AddBlock(amount*Tile.SIZE, 1*Tile.SIZE,random);
			  AddBlock(amount*Tile.SIZE, 0*Tile.SIZE,random); 	


			break;
		case 3:
			  AddBlock(amount*Tile.SIZE, 1*Tile.SIZE,random); 	
			  AddBlock(amount*Tile.SIZE, 2*Tile.SIZE,random); 	
			  AddBlock(amount*Tile.SIZE, 2*Tile.SIZE,random); 	
			  AddBlock(amount*Tile.SIZE, 3*Tile.SIZE,random); 	
			  AddBlock(amount*Tile.SIZE, 3*Tile.SIZE,random); 	
			  AddBlock(amount*Tile.SIZE, 3*Tile.SIZE,random); 	

			break;
		}
	}
	private void generateLevel() {
  
		AddBlock(amount*Tile.SIZE, 0*Tile.SIZE,1);
		AddBlock(amount*Tile.SIZE, 0*Tile.SIZE,1);
		AddBlock(amount*Tile.SIZE, 0*Tile.SIZE,1);
		AddBlock(amount*Tile.SIZE, 0*Tile.SIZE,1);
		AddBlock(amount*Tile.SIZE, 0*Tile.SIZE,1);
		AddBlock(amount*Tile.SIZE,1*Tile.SIZE,1);


	
 			 			
	}
	private void AddBlock(float x,float y,int i){
		amount +=1 ;
		tiles.add(new Tile(new Vector2(x,y),i));
	}
	private void AddCoin(float x,float y){
		coins.add(new Coin(new Vector2(x,y)));
	}
}