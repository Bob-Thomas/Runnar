package bob.com.player;

import java.util.HashMap;
import java.util.Map;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.math.Rectangle;

import bob.com.level.World;
import bob.com.player.Player.State;
import bob.com.tiles.Tile;

public class Controller {

	enum Keys {
		LEFT, RIGHT, JUMP, FIRE
	}

	private World 	world;
	private Player 	player;
	private float jumptime;
	static Map<Keys, Boolean> keys = new HashMap<Controller.Keys, Boolean>();
	private static final long LONG_JUMP_PRESS 	= 100l;
	private static final float ACCELERATION 	= 20;
	private static final float GRAVITY 			= -100f;
	private static final float MAX_JUMP_SPEED	= 5f;
	private static final float DAMP 			= 0.99f;
	private static final float MAX_VEL 			= 100f;
	
	// these are temporary
	private static final float WIDTH = 10f;
	private long	jumpPressedTime;
	private boolean jumpingPressed;
	private boolean grounded = false;
	static {
		keys.put(Keys.LEFT, false);
		keys.put(Keys.RIGHT, false);
		keys.put(Keys.JUMP, false);
		keys.put(Keys.FIRE, false);
	};

	public Controller(World world) {
		this.world = world;
		this.player = world.getPlayer();
	}

	// ** Key presses and touches **************** //

	public void leftPressed() {
		keys.get(keys.put(Keys.LEFT, true));
	}

	public void rightPressed() {
		keys.get(keys.put(Keys.RIGHT, true));
	}

	public void jumpPressed() {
		keys.get(keys.put(Keys.JUMP, true));
	}

	public void firePressed() {
		keys.get(keys.put(Keys.FIRE, false));
	}

	public void leftReleased() {
		keys.get(keys.put(Keys.LEFT, false));
	}

	public void rightReleased() {
		keys.get(keys.put(Keys.RIGHT, false));
	}

	public void jumpReleased() {
		keys.get(keys.put(Keys.JUMP, false));
	}

	public void fireReleased() {
		keys.get(keys.put(Keys.FIRE, false));
	}

	/** The main update method **/
	public void update(float delta) {
		processInput();
		player.update(delta);
		if(!UpCollision()){
		player.getAcceleration().y = GRAVITY;
		Gdx.app.log("hoi", "faggots ik raak niets");

		}
		else
		{
			player.getAcceleration().y = 0;
		}
		player.getAcceleration().mul(delta);
		player.getVelocity().x += 0.01f;
		player.getVelocity().add(player.getAcceleration().x, player.getAcceleration().y);
		if (player.getAcceleration().x == 0) player.getVelocity().x *= DAMP;
		
		if (player.getVelocity().x > MAX_VEL) {
			player.getVelocity().x = MAX_VEL;
		}
		if (player.getVelocity().x < -MAX_VEL) {
			player.getVelocity().x = -MAX_VEL;
		}
		if(UpCollision()){

			player.getVelocity().add(player.getAcceleration().x, player.getAcceleration().y);
			player.setPosition(player.getPosition());
			player.getAcceleration().y = 0;
			player.setState(State.IDLE);
		}

//	if (player.getPosition().y < 1) {
//			player.getPosition().y = 1f;
//			player.setPosition(player.getPosition());
//			if (player.getState().equals(State.JUMPING)) {
//				player.setState(State.IDLE);
//			}
//		 }
	}

	private void processInput() {
		if (keys.get(Keys.JUMP)) {
			grounded = false;
			if (!player.getState().equals(State.JUMPING)) {
				jumpingPressed = true;
				jumpPressedTime = System.currentTimeMillis();
				player.setState(State.JUMPING);
				player.getVelocity().y = MAX_JUMP_SPEED; 
			} else {
				if (jumpingPressed && ((System.currentTimeMillis() - jumpPressedTime) >= LONG_JUMP_PRESS)) {
					jumpingPressed = false;
				} else {
					if (jumpingPressed) {
						player.getVelocity().y = MAX_JUMP_SPEED;
					}
				}
			}
		}
	}
	private  boolean UpCollision(){
		for(Tile tile:world.getTiles()){
			float player_bottom = player.getPosition().y + player.SIZE;
			float tiles_bottom = tile.getPosition().y + tile.getBounds().height;
			float player_right = player.getPosition().x + player.SIZE;
			float tiles_right = tile.getPosition().x + tile.getBounds().height;

			float b_collision = tiles_bottom - player.getPosition().y;
			float t_collision = player_bottom - tile.getPosition().y;
			float l_collision = player_right - tile.getPosition().x;
			float r_collision = tiles_right - player.getPosition().y;
			
			Rectangle rect = new Rectangle(tile.getPosition().x,tile.getPosition().y,tile.SIZE,tile.SIZE);
			if(player.getBounds().overlaps(rect)){
				if (t_collision < b_collision && t_collision < l_collision && t_collision < r_collision )
				{                           
					return true;
				}
				if (b_collision < t_collision && b_collision < l_collision && b_collision < r_collision)                        
				{
					return true;
				}
				if (l_collision < r_collision && l_collision < t_collision && l_collision < b_collision)
				{
					return true;
				}
				if (r_collision < l_collision && r_collision < t_collision && r_collision < b_collision )
				{
					return true;
				}
			}
			return false;
		}
		return false;
	}
	private boolean SideCollision(){

	for(Tile tile:world.getTiles()){
		Rectangle rect = new Rectangle(tile.getPosition().x,tile.getPosition().y,tile.SIZE,tile.SIZE);
		if(player.getBounds().overlaps(rect)){
		if(player.getBounds().x < rect.x + rect.width &&
				player.getBounds().x + player.getBounds().width > rect.x &&
				player.getBounds().y-1 < rect.y + rect.height+1 &&           
				player.getBounds().y + player.getBounds().height > rect.y){
				Gdx.app.log("hit",Integer.toString(world.getTiles().size));

				return true;
			}			
		else
		{
			return false;
		}
	 }

	}
	return false;
	}
}
						
