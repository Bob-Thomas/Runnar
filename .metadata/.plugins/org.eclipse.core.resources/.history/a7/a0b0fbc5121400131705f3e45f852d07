package bob.com.level;


import java.util.ArrayList;
import java.util.Random;


import sun.rmi.runtime.Log;
import bob.com.player.Player;
import bob.com.player.Score;
import bob.com.background.Background;
import bob.com.objects.Coin;
import bob.com.objects.Tile;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.utils.Array;

public class World {
	private int amount = 0;
	private Random random = new Random();
	private int randomnumber;
	private Background background;
	private Rectangle delRect;
	/** The blocks making up the world **/
	private ArrayList<Chunk> chunks = new ArrayList<Chunk>();
	ArrayList<Coin> coins = new ArrayList<Coin>();
	public ArrayList<Coin> getCoins() {
		return coins;
	}
	public void setCoins(ArrayList<Coin> coins) {
		this.coins = coins;
	}
	public ArrayList<Chunk> getChunks() {
		return chunks;
	}
	public Background getBackground(){
		return background;
	}
	/** Our player controlled hero **/
	Player player;

	// Getters -----------
	public Player getPlayer() {
		return player;
	}
	// --------------------

	public World() {
		player = new Player(new Vector2(0, 2));
		this.delRect = new Rectangle(0,-100,10,500);
		this.background = new Background(new Vector2(-500,-100),new Vector2(-500,-100),new Vector2(-1000,-100));
		generateLevel();
	}
	public void update(float delta)
	{
		this.delRect.x = this.player.getPosition().x-10*32;
		if(this.background.getPosition().x+1000 < this.player.getPosition().x){
			this.background.getPosition().x = this.player.getPosition().x-500;
		}
		if(this.background.getPosition2().x+1000  < this.player.getPosition().x){
			this.background.getPosition2().x = this.player.getPosition().x-500;
		}
		if(this.background.getPosition3().x+1000  < this.player.getPosition().x){
			this.background.getPosition3().x = this.player.getPosition().x-500;
		}	
		randomnumber = random.nextInt((3 - 0) + 1) + 0;
		
		if( player.getPosition().x > (amount*(32*100)) ){
			generateRandom(randomnumber);
		}
//		for(Chunk c:chunks){
//			if(c.getTiles().get(c.getTiles().size()-c.getTiles().size()+1).get_box().overlaps(delRect))
//			{
//				chunks.remove(c);
//				break;
//			}
//		}
		for(Coin c:coins){
			if(c.getBounds().overlaps(delRect)){
				coins.remove(c);
				break;			
			}
			if(c.getBounds().overlaps(player.getBounds())){
				coins.remove(c);
				Score.setScore(Score.getScore() + 10);
				break;
			}
		}
		Gdx.app.log("size",Integer.toString(amount)+","+Integer.toString(chunks.size()));
		for(Coin c:coins){
			c.Update(delta);
		}
		

	}
	private void generateRandom(int random){

		switch(random)
		{
		case 1:
			 AddChunk(amount,0,1,1,3);
			 AddCoin(amount,1*32);
			break;
		case 2:
			 AddChunk(amount,0,1,2,1);
			 AddCoin(amount,3*32);
			break;
		case 3:
			 AddChunk(amount,0,1,2,2);
			 AddCoin(amount,3*32);
			break;
		default:
			break;
		}
		 
	}
	private void generateLevel() {
		 AddChunk(amount,0,100,1,1);

		
	
 			 			
	}
	private void AddChunk(int x,int y,int w,int h,int i){
		amount += w*32;
		this.chunks.add(new Chunk(x, y, w, h,i));
	}
	private void AddCoin(int x,int y){
		this.coins.add(new Coin(new Vector2(x,y)));
	}

}