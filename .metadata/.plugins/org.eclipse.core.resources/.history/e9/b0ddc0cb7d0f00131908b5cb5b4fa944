package bob.com.level;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

import sun.rmi.runtime.Log;
import bob.com.background.Background;
import bob.com.objects.Coin;
import bob.com.objects.Tile;
import bob.com.player.Player;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.utils.Array;

public class World {
	private int random = 0;
	private int amount = 0;
	private Random rng = new Random();
	private Player player;
	private Rectangle delRect;
	private Background background;
	ArrayList<Coin> coins = new ArrayList<Coin>();
	
	public ArrayList<Coin> getCoins() {
		return coins;
	}
	/** The blocks making up the world **/
	ArrayList<Tile> tiles = new ArrayList<Tile>();
	
	public ArrayList<Tile> getTiles() {
		return tiles;
	}
	public void setTiles(ArrayList<Tile> tiles) {
		this.tiles = tiles;
	}
	/** Our player controlled hero **/

	// Getters -----------
	public ArrayList<Tile> getBlocks() {
		return tiles;
	}
	public Player getPlayer() {
		return player;
	}
	// --------------------

	public World() {
		player =   new Player(new Vector2(0, 2*Tile.SIZE));
		delRect = new Rectangle(player.getPosition().x-200,-30,10,600);
		this.background = new Background(new Vector2(-500,-100),new Vector2(-500,-100),new Vector2(-500,-100));
		generateLevel();
	}
	public void update(float delta)
	{
		for(Coin coin : coins){
			coin.Update(delta);
		}
		if(this.background.getPosition().x + 1000 < player.getPosition().x){
			background.getPosition().x = player.getPosition().x-500;
		}
		if(this.background.getPosition2().x + 1000 < player.getPosition().x){
			background.getPosition2().x = player.getPosition().x-500;
		}
		if(this.background.getPosition3().x + 1000 < player.getPosition().x){
			background.getPosition3().x = player.getPosition().x-500;
		}

		delRect.x = player.getPosition().x-400;
		random = rng.nextInt(3 - 0 + 1) + 0;
		if( player.getPosition().x > (tiles.size()-6)*32 ){
			generateRandom(random);
		}
		
		for(Tile t : tiles){
			if (t.get_box().overlaps(delRect))
			{
				if(t.getPosition().x < delRect.x){
				tiles.remove(t);
				}
				break;
			}
		}
		for(Coin coin : coins){
			if (player.getBounds().overlaps(coin.getBounds()))
			{
				coins.remove(coin);
				break;
			}
		}
		Gdx.app.log("amount of tiles",Integer.toString(tiles.size())+","+Integer.toString(amount));

	}
	private void generateRandom(int random){
		switch(random)
		{
		case 0:
		{
			 AddBLock(amount*Tile.SIZE, 0*Tile.SIZE,random);
			 AddBLock(amount*Tile.SIZE, 0*Tile.SIZE,random); 		
			 AddBLock(amount*Tile.SIZE, 0*Tile.SIZE,random); 	
			 AddBLock(amount*Tile.SIZE, 0*Tile.SIZE,random); 	
			 AddBLock(amount*Tile.SIZE, 0*Tile.SIZE,random); 	
			 AddBLock(amount*Tile.SIZE, 1*Tile.SIZE,random);
			
		}
		case 1:
			 AddBLock(amount*Tile.SIZE, 0*Tile.SIZE,random);
			 AddBLock(amount*Tile.SIZE, 0*Tile.SIZE,random); 	
			 AddBLock(amount*Tile.SIZE, 0*Tile.SIZE,random); 	
			 AddBLock(amount*Tile.SIZE, 0*Tile.SIZE,random); 	
			 AddBLock(amount*Tile.SIZE, 0*Tile.SIZE,random); 	
			 AddBLock(amount*Tile.SIZE, 1*Tile.SIZE,random); 	

			break;
		case 2:
			 AddBLock(amount*Tile.SIZE, 1*Tile.SIZE,random); 	
			 AddBLock(amount*Tile.SIZE, 0*Tile.SIZE,random); 	
			 AddBLock(amount*Tile.SIZE, 1*Tile.SIZE,random); 	
			 AddBLock(amount*Tile.SIZE, 0*Tile.SIZE,random); 	
			 AddBLock(amount*Tile.SIZE, 1*Tile.SIZE,random);
			 AddBLock(amount*Tile.SIZE, 0*Tile.SIZE,random); 	


			break;
		case 3:
			 AddBLock(amount*Tile.SIZE, 1*Tile.SIZE,random); 	
			 AddBLock(amount*Tile.SIZE, 2*Tile.SIZE,random); 	
			 AddBLock(amount*Tile.SIZE, 2*Tile.SIZE,random); 	
			 AddBLock(amount*Tile.SIZE, 3*Tile.SIZE,random); 	
			 AddBLock(amount*Tile.SIZE, 3*Tile.SIZE,random); 	
			 AddBLock(amount*Tile.SIZE, 3*Tile.SIZE,random); 	

			break;
		}
	}
	private void generateLevel() {
		AddCoin(amount*32,0);
		AddBLock(amount*Tile.SIZE, 0*Tile.SIZE,3);
		AddBLock(amount*Tile.SIZE, 0*Tile.SIZE,3);
		AddBLock(amount*Tile.SIZE, 0*Tile.SIZE,3);
		AddBLock(amount*Tile.SIZE, 0*Tile.SIZE,3);
		AddBLock(amount*Tile.SIZE, 0*Tile.SIZE,3);
		AddBLock(amount-1*Tile.SIZE, 0*Tile.SIZE,3);
	}

	private void AddBLock(float x,float y,int random){
		amount+=1;
		tiles.add(new Tile(new Vector2(x,y),random));
	}
	private void AddCoin(float x,float y){
		coins.add(new Coin(new Vector2(x,y)));
	}
	public Background getBackground() {
		return background;
	}
	public void setBackground(Background background) {
		this.background = background;
	}
}
